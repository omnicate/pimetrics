<!DOCTYPE html>
<html lang="en">
    <head>
        <title>PI Metrics</title>
        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="static/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
        <script src="https://cdn.jsdelivr.net/npm/vue"></script>
        <style>
            main.container {
                margin-top: 50px;
            }
            .flex-field {
                display: flex;
            }

            .flex-field select {
                width: 80px;
                margin-right: 10px;
            }

            input, textarea {
                margin-bottom: 16px;
            }
            .messages {
                display: flex;
                flex-direction: column;
                padding: 16px;
                background: #f5f5f5;
                max-height: 500px;
                overflow: scroll;
                border-radius: 8px;

            }
            .message {
                background: #e9e9e9;
                padding: 8px 16px;
                max-width: 200px;
                border-radius: 16px;
                align-self: flex-start;
            }
            .message.self {
                background: #008fbb;
                color: #fff;
                align-self: flex-end;
            }
            .message + .message {
                margin-top: 8px;
            }
            .message:not(.self) + .message.self,
            .message.self + .message:not(.self)  {
                margin-top: 16px;
            }

        </style>
    </head>

    <body>
        <main class="container">
            <div class="row">
                <div class="col">
                    <h3>Attention (AT) commands</h3>
                    <input id="modemCmd" type="text" class="form-control" placeholder="Ex. ath, atz, atz+cmgf=1"/>
                    <button onclick="send()" class="btn btn-primary">Send</button>
                    <hr>
                    <h3>SMS sending</h3>
                    <form>
                        <div class="flex-field">
                            <select class="form-control" id="country">
                                <option selected=>+47</option>
                                <option>+46</option>
                            </select>
                            <input id="smsNum" type="text" class="form-control" placeholder="Number"/>
                        </div>
                        <textarea id="msg" class="form-control" placeholder="Message"></textarea>
                        <button type="button" onclick="sendSMS()" class="btn btn-primary">Send SMS</button>
                        <button type="button" onclick="smsReceiveMode()" class="btn btn-primary">SMS Receive</button>
                        <button type="button" onclick="stopSmsReceiveMode()" class="btn btn-primary">Stop SMS Receive</button>
                    </form>
                    <hr>
                    <h3>Make Call</h3>
                    <form>
                        <div class="flex-field">
                            <select class="form-control" id="callCountry">
                                <option selected=>+47</option>
                                <option>+46</option>
                            </select>
                            <input id="callNum" type="text" class="form-control" placeholder="Number"/>
                        </div>
                        <button type="button" onclick="call()" class="btn btn-primary">Call</button>
                    </form>
                </div>
                <div class="col">
                    <h3>Status</h3>
                    <div class="card">
                        <div class="card-body">
                            <pre id="signalStatus">Signal Quality: Unknown</pre>
                            <pre id="providerStatus">Provider: Unknown</pre>
                        </div>
                    </div>
                    <h3>Output</h3>
                    <div class="card">
                        <div class="card-body">
                            <pre id="output">Waiting...</pre>
                        </div>
                    </div>

                    <hr>
                    <h3>Sms conversation</h3>
                    <div id="vue-app">
                        <div class="messages">
                            <div v-for="message in messages" class="message" :class="{'self' : message.isSelf}">
                                {%message.text%}
                                <pre class="label label-default">{%message.number%}</pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        <script src="static/js/axios.min.js"></script>
        <!-- <script src="js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script> -->
    </body>
    <script>
        var app = new Vue({
            el: '#vue-app',
            delimiters: ['{%', '%}'],
            data: {
                messages: [
                    // {"isSelf": false, text: "Hello"},
                    // {"isSelf": true, text: "Hei"},
                    // {"isSelf": true, text: "Sup?"},
                    // {"isSelf": false, text: "Meh"}
                ]
            },
            created() {
                var smsSocket = new WebSocket("ws://{{.IP}}:{{.Port}}/ws")
                smsSocket.onmessage = function (event) {
                    let data = JSON.parse(event.data)
                    app.messages.push({isSelf: false, text: data.text, number: `from: ${data.number}`})
                }
            }
        });

        setInterval(function () {
            (async () => {
                const response = await axios.get("http://{{.IP}}:{{.Port}}/v2/signal_status");
                console.log(response)
                document.getElementById("signalStatus").innerText = "Signal Quality: " + response.data;
            })();

            (async () => {
                const response = await axios.get("http://{{.IP}}:{{.Port}}/v2/provider");
                console.log(response)
                document.getElementById("providerStatus").innerText = "Provider: " + response.data;
            })();
        },30 * 1000);

        function send() {
            axios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';
            axios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';

            let payload = document.getElementById("modemCmd").value;
            console.log("Sending payload: ", payload);

            (async () => {
                const response = await axios.post("http://{{.IP}}:{{.Port}}/v2/send_command", payload);
                console.log(response)
                document.getElementById("output").innerText = response.data;
            })();
        }

        function sendSMS() {
            const countrySelect = document.getElementById("country")
            const country = countrySelect.options[countrySelect.selectedIndex].value
            let payload = {
                "number": country + document.getElementById("smsNum").value,
                "text": document.getElementById("msg").value
            };

            console.log("Sending payload: ", payload);
            (async () => {
                const response = await axios.post("http://{{.IP}}:{{.Port}}/v2/send_sms", payload);
                console.log(response)

                document.getElementById("output").innerText = response.data;
                app.messages.push({isSelf: true, text: payload.text, number: `to: ${payload.number}`})
            })();
        }

        function smsReceiveMode() {
            (async () => {
                const response = await axios.post("http://{{.IP}}:{{.Port}}/v2/sms_receive");
                console.log(response)

                document.getElementById("output").innerText = response.data;
            })();
        }

        function stopSmsReceiveMode() {
            (async () => {
                const response = await axios.post("http://{{.IP}}:{{.Port}}/v2/stop_sms_receive");
                console.log(response)

                document.getElementById("output").innerText = response.data;
            })();
        }

        function call() {
            const countrySelect = document.getElementById("callCountry")
            const country = countrySelect.options[countrySelect.selectedIndex].value
            let payload = {
                "number": country + document.getElementById("callNum").value
            };

            console.log("Sending payload: ", payload);
            (async () => {

                const response = await axios.post("http://{{.IP}}:{{.Port}}/make_call", payload);
                console.log(response)

                document.getElementById("output").innerText = response.data;
            })();
        }

    </script>
</html>
